openapi: 3.0.3
info:
  title: Volcano Explorer - OpenAPI 3.0
  description: |-
    This is the API Document for the Volcano Explorer Server based on the OpenAPI 3.0 specification.
    
    Some useful links:
    - [The Volcano Explorer repository](https://github.com/cwalters162/volcano_explorer)
    - [The source API definition for Volcano Explorer](https://github.com/cwalters162/volcano_explorer/tree/main/backend/resources/api_spec.yaml)
  version: 1.0.11
servers:
  - url: https://volcanoexplorer.net/api
tags:
  - name: user
    description: Managing the user
paths:
  /user/{username}:
    post:
      tags:
        - user
      summary: Create a new user with the provided username
      operationId: createUserWithName
      parameters: 
        - name: username
          in: path
          description: 'The name of the user to be created'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation - bearer_token will only be shown once and is used for authentication.
          content:
            application/json:
              schema: 
                type: object
                properties:
                  bearer_token:
                    type: string
                    format: uuid
                    example: "12345678-1234-5678-9a1b-2c3d4e5f6g7h"
                  id:
                    type: integer
                    format: int64
                    example: 10
                  username:
                    type: string
                    example: theUser
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
security:
  - bearerAuth: []